[MegaTune]
	MTversion      = 2.25 ; MegaTune itself; needs to match exec version.

	versionInfo    = "S"
	queryCommand   = "Q"
	signature      = "IOExtendNanoLambda201811";		
                   

[TunerStudio]
	iniSpecVersion = 3.24
;-------------------------------------------------------------------------------
[Constants]

	endianness			= little
	nPages				= 1
	pageSize			= 11
	burnCommand			= "B"
	pageReadCommand		= "V"
	pageValueWrite		= "W%o%v"
	pageActivate		= "P\001"
 
	blockReadTimeout		= 2000		;Milliseconds total timeout for reading page.
	pageActivationDelay		= 10		;Milliseconds delay after burn command.
	tsWriteBlocks			= off
	interWriteDelay			= 5
	blockingFactor			= 2048
	tableBlockingFactor		= 2048
	delayAfterPortOpen		= 1000

;page1 = table2 = Number 2
	page = 1
;	name			= class,       type,	   offset,   shape,  units, scale,    translate,      lo,  	 hi,	digits
	StartConf		= scalar,	U08,		0,		"",	1,	0.00000,	1,	255,	0; * (  1 byte)
	CjConf			= scalar, 	U08,		1,		"",	1,	0.00000,	1, 	255,	0; * (  1 byte)
	CjSamples		= scalar, 	U08,		2,		"",	1,	0.00000,	1, 	255,	0; * (  1 byte)	
	CjCalPeriod		= scalar, 	U08,		3,		"ms",	1,	0.00000,	1, 	255,	0; * (  1 byte)
	CjErrCnt		= scalar, 	U08,		4,		"",	1,	0.00000,	1, 	255,	0; * (  1 byte)
	LambdaPeriod	= scalar, 	U08,		5,		"ms",	1,	0.00000,	1, 	255,	0; * (  1 byte)
	SupplyErrCnt	= scalar, 	U08,		6,		"",	1,	0.00000,	1, 	255,	0; * (  1 byte)
	tCondensate		= scalar, 	U16,		7,		"ms",	1,	0.00000,     1000,    10000,	0; * (  2 byte)
	tPreheat		= scalar, 	U16,		9,		"ms",	1,	0.00000,     1000,    10000,	0; * (  2 byte)
;-------------------------------------------------------------------------------
[ControllerCommands]

;-------------------------------------------------------------------------------
[ConstantsExtensions]

;-------------------------------------------------------------------------------
[SettingContextHelp]

	StartConf = "Startup confident count (Battery voltage must be in range for this number)"
	CjConf = "Cj125 communication stable confident count"
	CjSamples = "Cj125 number of calibration samples (Number of samples for average) "
	CjCalPeriod = "Cj125 calibration sample period (Read UA / UR every this ms)"
	CjErrCnt = "Cj125 read error count"
	LambdaPeriod = "Lambda calculation period (Calculate actual lambda value every this ms)"
	SupplyErrCnt = "Supply voltage out of range error count"
	tCondensate = "Probe condensate duration (Limit heater power for this time after enable)"
	tPreheat= "Probe preheat period (Ramp time during preheat, +0.4V every this time)"
;-------------------------------------------------------------------------------
[Menu]
	menu = "&Nano Lambda Setup"
		subMenu = base_settings,	"BASIC settings"

;-------------------------------------------------------------------------------
[UserDefined]

	dialog = base_settings, "Basic settings"
		field = "Startup"
		field = "Battery voltage confident count", StartConf	
		field = "Cj125 multiple read confident count", CjConf
		field = "Calibration" 					
		field = "Cj125 calibration samples", CjSamples			
		field = "Cj125 calibration period", CjCalPeriod 	
		field = "Probe heating"	
		field = "Probe condensate duration", tCondensate
		field = "Probe preheat period", tPreheat
	  	field = "General"				
		field = "Cj125 read error count", CjErrCnt
		field = "Lambda calculation period", LambdaPeriod
		field = "Supply out of range error count", SupplyErrCnt

;-------------------------------------------------------------------------------
[OutputChannels]

	deadValue		= { 0 } ; Convenient unchanging value.

	ochGetCommand	= "A"

	ochBlockSize	=  22

	Seconds		= scalar, U32, 0, "s", 1.0, 0.0
	LoopsSec	= scalar, U32, 4, "", 1.0, 0.0
	lambda		= scalar, U08, 8, "", 0.01, 0.0
	UAOpt		= scalar, S16, 9, "", 0.01, 0.0
	UROpt		= scalar, S16, 11, "", 1, 0.0
	UA			= scalar, S16, 13, "", 1.0, 0.0
	UR			= scalar, S16, 15, "", 1.0, 0.0
	Status		= scalar, U08, 17, "", 1.0, 0.0
	SupplyVolt	= scalar, S16, 18, "V", 0.001, 0.0
	CjState		= scalar, U16, 20, "", 1.0, 0.0

	secl = { Seconds % 256 }, "s"; For runtime screen.
	UsPerLoop = {1000000.0 / LoopsSec}
	time             = { timeNow }, "s"

;-------------------------------------------------------------------------------
[GaugeConfigurations]

	;Name		Var		Title         Units    Lo        Hi     LoD    LoW   HiW   HiD vd ld
	SecondsGauge	= Seconds,		"Runtime",    	 "s",	  0,   	  65535,    -1,    -1,  65535, 65535, 0, 0
	MainLoops		= LoopsSec,		"Loops / Sec"	"Cnt",	  0,     999999,    -1,    -1,  999999, 999999, 0, 0
	LoopTime		= UsPerLoop,	"Loop Time",    "uS",	0.0,    10000.0,    -1.0,    -1.0,  10000.0, 10000.0, 0.0, 0.0
	lambdaGauge     = lambda,		"Lambda",		"",      0.5,   1.5,    0.5,   0.7,    2,  1.1, 2, 2
	UAOptGauge		= UAOpt,		"Cj Lambda optimal",	"adc",	  0,   	  1023,    -1,    -1,  1024, 1024, 0, 0
	UROptGauge		= UROpt,		"Cj Heater optimal",	"adc",	  0,   	  1023,    -1,    -1,  1024, 1024, 0, 0
	UAGauge			= UA,			"Cj Lambda actual",		"adc",	  0,   	  1023,    -1,    -1,  1024, 1024, 0, 0
	URGauge			= UR,			"Cj Heater actual",		"adc",	  0,   	  1023,    -1,    -1,  1024, 1024, 0, 0
	SupplyGauge		= SupplyVolt,	"Supply voltage",		"V",	  0, 25, 10, 11, 16, 17, 2, 2
	CjStatGauge		= CjState, 		"Cj 125 state",			"",		0,   	  65535,    -1,    -1,  65535, 65535, 0, 0		
;-------------------------------------------------------------------------------
[FrontPage]

	gauge1 = SecondsGauge	
	gauge2 = MainLoops	
	gauge3 = SupplyGauge	
	gauge4 = lambdaGauge
	gauge5 = UAOptGauge	
	gauge6 = UROptGauge	
	gauge7 = UAGauge	
	gauge8 = URGauge

	indicator1 = { Status == 1 }, "Not in preset", "In preset", white, black, green, black
	indicator2 = { Status == 2 }, "Not in start", "In start", white, black, green, black	
	indicator3 = { Status == 3 }, "Not in calibration", "In calibration", white, black, green, black	
	indicator4 = { Status == 4 }, "Not in idle", "In idle", white, black, green, black	
	indicator5 = { Status == 5 }, "Not in condensate", "In condensate", white, black, green, black	
	indicator6 = { Status == 6 }, "Not in preheat", "In preheat", white, black, green, black	
	indicator7 = { Status == 8 }, "Not in running", "In running", white, black, green, black	
	indicator8 = { Status == 9 }, "Not in error", "In error", white, black, red, black	

	;No answear
	indicator = { (CjState & 0x2800) == 0x2800 }, "Cj no answear", "CJ comm ok", red, black, green, black

	;Low voltage
	indicator9 = { (CjState & 0x2855) != 0x2855 }, "Cj voltage okay", "CJ voltage low", green, black, red, black

	;VM diagnostic
	indicator10 = { (CjState & 0x2803) == 0x2803 }, "VM error", "VM no error", red, black, green, black
	indicator11 = { (CjState & 0x2803) == 0x2800 }, "VM no hort to gnd", "VM short to gnd", white, black, red, black
	indicator12 = { (CjState & 0x2803) == 0x2810 }, "VM no short to batt", "VM short to batt", white, black, red, black

	;UN diagnostic
	indicator13 = { (CjState & 0x280C) == 0x280C }, "UN error", "UN no error", red, black, green, black
	indicator14 = { (CjState & 0x280C) == 0x2800 }, "UN no short to gnd", "UN short to gnd", white, black, red, black
	indicator15 = { (CjState & 0x280C) == 0x2808 }, "UN no short to batt", "UN short to batt", white, black, red, black

	;IA / IP diagnostic
	indicator16 = { (CjState & 0x2830) == 0x2830 }, "IA / IP error", "IA / IP no error", red, black, green, black
	indicator17 = { (CjState & 0x2830) == 0x2800 }, "IA / IP no short to gnd", "IA / IP short to gnd", white, black, red, black
	indicator18 = { (CjState & 0x2830) == 0x2820 }, "IA / IP no short to batt", "IA / IP short to batt", white, black, red, black

	;Heater diagnostic
	indicator19 = { (CjState & 0x28C0) == 0x28C0 }, "Heater error", "Heater no error", red, black, green, black
	indicator20 = { (CjState & 0x28C0) == 0x2800 }, "Heater no short to gnd", "Heater short to gnd", white, black, red, black
	indicator21 = { (CjState & 0x28C0) == 0x2840 }, "Heater no open load", "Heater open load", white, black, red, black
	indicator22 = { (CjState & 0x28C0) == 0x2880 }, "Heater no short to batt", "Heater short to batt", white, black, red, black


;-------------------------------------------------------------------------------
[Datalog]
	entry = time,    	"Time",    		float,  "%.3f"
	entry = Seconds,	"Runtime",		int,	"%d"
	entry = LoopsSec, 	"Loops/Sec",	int,    "%d"
	entry = lambda,		"Lambda",		float,  "%.2f"